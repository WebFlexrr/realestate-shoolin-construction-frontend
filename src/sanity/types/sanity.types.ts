/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
	_type: 'sanity.imagePaletteSwatch';
	background?: string;
	foreground?: string;
	population?: number;
	title?: string;
};

export type SanityImagePalette = {
	_type: 'sanity.imagePalette';
	darkMuted?: SanityImagePaletteSwatch;
	lightVibrant?: SanityImagePaletteSwatch;
	darkVibrant?: SanityImagePaletteSwatch;
	vibrant?: SanityImagePaletteSwatch;
	dominant?: SanityImagePaletteSwatch;
	lightMuted?: SanityImagePaletteSwatch;
	muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
	_type: 'sanity.imageDimensions';
	height?: number;
	width?: number;
	aspectRatio?: number;
};

export type Testimonial = {
	_id: string;
	_type: 'testimonial';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	name?: string;
	rating?: 1 | 2 | 3 | 4 | 5;
	message?: string;
	image?: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: 'image';
	};
};

export type Faq = {
	_id: string;
	_type: 'faq';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	question?: string;
	answer?: string;
};

export type Project = {
	_id: string;
	_type: 'project';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	slug?: Slug;
	location?: string;
	tags?: Array<string>;
	status?: 'under_construction' | 'ready_to_move' | 'completed' | 'not_started';
	price?: number;
	description?: string;
	thumbnail?: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		caption?: string;
		alternative?: string;
		_type: 'image';
	};
	projectImages?: Array<{
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alternative?: string;
		_type: 'projectImage';
		_key: string;
	}>;
	bhks?: Array<number>;
	total_units?: number;
	possession_date?: string;
	floors?: number;
	amenities?: amenities;
	unit_layout_plan?: unit_layout_plan;
	brochure?: string;
	mapsLocation?: string;
	construction_progress?: construction_progress;
};

export type amenities = {
	elevators?: boolean;
	camera?: boolean;
	park?: boolean;
	powerBackup?: boolean;
	waterSupply?: boolean;
	swimmingPool?: boolean;
	electricity?: boolean;
	carParking?: boolean;
	bikeParking?: boolean;
};

export type construction_progress = Array<{
	title?: string;
	date?: string;
	file?: Array<string>;
	_key: string;
}>;

export type unit_layout_plan = Array<{
	floor?:
		| 'ground'
		| '1st'
		| '2nd'
		| '3rd'
		| '4th'
		| '5th'
		| '6th'
		| '7th'
		| '8th'
		| '9th'
		| '10th'
		| '11th'
		| '12th';
	floorImage?: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: 'image';
	};
	floorImageInFile?: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.fileAsset';
		};
		_type: 'file';
	};
	flats?: Array<{
		flatName?: string;
		bhkType?: '1bhk' | '2bhk' | '3bhk';
		carpetArea?: number;
		builtUpArea?: number;
		standardBuiltUpArea?: number;
		floorImage?: {
			asset?: {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
			};
			hotspot?: SanityImageHotspot;
			crop?: SanityImageCrop;
			_type: 'image';
		};
		livingDining?: string;
		bedroomArea?: Array<string>;
		bathroomArea?: string;
		kitchen?: string;
		balconyArea?: string;
		_key: string;
	}>;
	_key: string;
}>;

export type Geopoint = {
	_type: 'geopoint';
	lat?: number;
	lng?: number;
	alt?: number;
};

export type SanityFileAsset = {
	_id: string;
	_type: 'sanity.fileAsset';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	source?: SanityAssetSourceData;
};

export type SanityImageCrop = {
	_type: 'sanity.imageCrop';
	top?: number;
	bottom?: number;
	left?: number;
	right?: number;
};

export type SanityImageHotspot = {
	_type: 'sanity.imageHotspot';
	x?: number;
	y?: number;
	height?: number;
	width?: number;
};

export type SanityImageAsset = {
	_id: string;
	_type: 'sanity.imageAsset';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	metadata?: SanityImageMetadata;
	source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
	_type: 'sanity.assetSourceData';
	name?: string;
	id?: string;
	url?: string;
};

export type SanityImageMetadata = {
	_type: 'sanity.imageMetadata';
	location?: Geopoint;
	dimensions?: SanityImageDimensions;
	palette?: SanityImagePalette;
	lqip?: string;
	blurHash?: string;
	hasAlpha?: boolean;
	isOpaque?: boolean;
};

export type Slug = {
	_type: 'slug';
	current?: string;
	source?: string;
};

export type AllSanitySchemaTypes =
	| SanityImagePaletteSwatch
	| SanityImagePalette
	| SanityImageDimensions
	| Testimonial
	| Faq
	| Project
	| Geopoint
	| SanityFileAsset
	| SanityImageCrop
	| SanityImageHotspot
	| SanityImageAsset
	| SanityAssetSourceData
	| SanityImageMetadata
	| Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
